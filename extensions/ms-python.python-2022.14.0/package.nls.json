{
    "python.command.python.sortImports.title": "Sort Imports",
    "python.command.python.startREPL.title": "Start REPL",
    "python.command.python.createTerminal.title": "Create Terminal",
    "python.command.python.execInTerminal.title": "Run Python File in Terminal",
    "python.command.python.debugInTerminal.title": "Debug Python File",
    "python.command.python.execInTerminalIcon.title": "Run Python File",
    "python.command.python.setInterpreter.title": "Select Interpreter",
    "python.command.python.clearWorkspaceInterpreter.title": "Clear Workspace Interpreter Setting",
    "python.command.python.viewOutput.title": "Show Output",
    "python.command.python.viewLanguageServerOutput.title": "Show Language Server Output",
    "python.command.python.configureTests.title": "Configure Tests",
    "python.command.testing.rerunFailedTests.title": "Rerun Failed Tests",
    "python.command.python.execSelectionInTerminal.title": "Run Selection/Line in Python Terminal",
    "python.command.python.execSelectionInDjangoShell.title": "Run Selection/Line in Django Shell",
    "python.command.python.goToPythonObject.title": "Go to Python Object",
    "python.command.python.reportIssue.title": "Report Issue...",
    "python.command.python.setLinter.title": "Select Linter",
    "python.command.python.enableLinting.title": "Enable/Disable Linting",
    "python.command.python.runLinting.title": "Run Linting",
    "python.command.python.enableSourceMapSupport.title": "Enable Source Map Support For Extension Debugging",
    "python.command.python.clearCacheAndReload.title": "Clear Internal Cache and Reload Window",
    "python.command.python.analysis.restartLanguageServer.title": "Restart Language Server",
    "python.command.python.launchTensorBoard.title": "Launch TensorBoard",
    "python.command.python.refreshTensorBoard.title": "Refresh TensorBoard",
    "python.menu.createNewFile.title": "Python File",
    "python.autoComplete.extraPaths.description":"List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.",
    "python.condaPath.description": "Path to the conda executable to use for activation (version 4.4+).",
    "python.defaultInterpreterPath.description": "Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See https://aka.ms/AAfekmf to understand when this is used",
    "python.diagnostics.sourceMapsEnabled.description": "Enable source map support for meaningful stack traces in error logs.",
    "python.envFile.description": "Absolute path to a file containing environment variable definitions.",
    "python.experiments.enabled.description": "Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.",
    "python.experiments.optInto.description": "List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.",
    "python.experiments.optOutFrom.description": "List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.",
    "python.formatting.autopep8Args.description":"Arguments passed in. Each argument is a separate item in the array.",
    "python.formatting.autopep8Path.description": "Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.",
    "python.formatting.blackArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.formatting.blackPath.description": "Path to Black, you can use a custom version of Black by modifying this setting to include the full path.",
    "python.formatting.provider.description": "Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.",
    "python.formatting.yapfArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.formatting.yapfPath.description": "Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.",
    "python.globalModuleInstallation.description": "Whether to install Python modules globally when not using an environment.",
    "python.languageServer.description": "Defines type of the language server.",
    "python.languageServer.defaultDescription": "Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.",
    "python.languageServer.jediDescription": "Use Jedi behind the Language Server Protocol (LSP) as a language server.",
    "python.languageServer.pylanceDescription": "Use Pylance as a language server.",
    "python.languageServer.noneDescription": "Disable language server capabilities.",
    "python.linting.banditArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.banditEnabled.description": "Whether to lint Python files using bandit.",
    "python.linting.banditPath.description": "Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.",
    "python.linting.cwd.description": "Optional working directory for linters.",
    "python.linting.enabled.description": "Whether to lint Python files.",
    "python.linting.flake8Args.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.flake8CategorySeverity.E.description": "Severity of Flake8 message type 'E'.",
    "python.linting.flake8CategorySeverity.F.description": "Severity of Flake8 message type 'F'.",
    "python.linting.flake8CategorySeverity.W.description": "Severity of Flake8 message type 'W'.",
    "python.linting.flake8Enabled.description": "Whether to lint Python files using flake8.",
    "python.linting.flake8Path.description": "Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.",
    "python.linting.ignorePatterns.description": "Patterns used to exclude files or folders from being linted.",
    "python.interpreter.infoVisibility.description": "Controls when to display information of selected interpreter in the status bar.",
    "python.interpreter.infoVisibility.never.description": "Never display information.",
    "python.interpreter.infoVisibility.onPythonRelated.description": "Only display information if Python-related files are opened.",
    "python.interpreter.infoVisibility.always.description": "Always display information.",
    "python.linting.lintOnSave.description": "Whether to lint Python files when saved.",
    "python.linting.maxNumberOfProblems.description": "Controls the maximum number of problems produced by the server.",
    "python.linting.mypyArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.mypyCategorySeverity.error.description": "Severity of Mypy message type 'Error'.",
    "python.linting.mypyCategorySeverity.note.description": "Severity of Mypy message type 'Note'.",
    "python.linting.mypyEnabled.description": "Whether to lint Python files using mypy.",
    "python.linting.mypyPath.description": "Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.",
    "python.linting.prospectorArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.prospectorEnabled.description": "Whether to lint Python files using prospector.",
    "python.linting.prospectorPath.description": "Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.",
    "python.linting.pycodestyleArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.pycodestyleCategorySeverity.E.description": "Severity of pycodestyle message type 'E'.",
    "python.linting.pycodestyleCategorySeverity.W.description": "Severity of pycodestyle message type 'W'.",
    "python.linting.pycodestyleEnabled.description": "Whether to lint Python files using pycodestyle.",
    "python.linting.pycodestylePath.description": "Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.",
    "python.linting.pydocstyleArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.pydocstyleEnabled.description": "Whether to lint Python files using pydocstyle.",
    "python.linting.pydocstylePath.description": "Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.",
    "python.linting.pylamaArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.pylamaEnabled.description": "Whether to lint Python files using pylama.",
    "python.linting.pylamaPath.description": "Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.",
    "python.linting.pylintArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.linting.pylintCategorySeverity.convention.description": "Severity of Pylint message type 'Convention/C'.",
    "python.linting.pylintCategorySeverity.error.description": "Severity of Pylint message type 'Error/E'.",
    "python.linting.pylintCategorySeverity.fatal.description": "Severity of Pylint message type 'Error/F'.",
    "python.linting.pylintCategorySeverity.refactor.description": "Severity of Pylint message type 'Refactor/R'.",
    "python.linting.pylintCategorySeverity.warning.description": "Severity of Pylint message type 'Warning/W'.",
    "python.linting.pylintEnabled.description": "Whether to lint Python files using pylint.",
    "python.linting.pylintPath.description": "Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.",
    "python.logging.level.description": "The logging level the extension logs at, defaults to 'error'",
    "python.pipenvPath.description": "Path to the pipenv executable to use for activation.",
    "python.poetryPath.description": "Path to the poetry executable.",
    "python.pylanceLspNotebooksEnabled.description": "Determines if Pylance's experimental LSP notebooks support is used or not.",
    "python.sortImports.args.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.sortImports.path.description": "Path to isort script, default using inner version",
    "python.tensorBoard.logDirectory.description": "Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.",
    "python.terminal.activateEnvInCurrentTerminal.description": "Activate Python Environment in the current Terminal on load of the Extension.",
    "python.terminal.activateEnvironment.description": "Activate Python Environment in Terminal created using the Extension.",
    "python.terminal.executeInFileDir.description": "When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.",
    "python.terminal.focusAfterLaunch.description": "When launching a python process, whether to focus on the terminal.",
    "python.terminal.launchArgs.description": "Python launch arguments to use when executing a file in the terminal.",
    "python.testing.autoTestDiscoverOnSaveEnabled.description": "Enable auto run test discovery when saving a test file.",
    "python.testing.cwd.description": "Optional working directory for tests.",
    "python.testing.debugPort.description": "Port number used for debugging of tests.",
    "python.testing.promptToConfigure.description": "Prompt to configure a test framework if potential tests directories are discovered.",
    "python.testing.pytestArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.testing.pytestEnabled.description": "Enable testing using pytest.",
    "python.testing.pytestPath.description": "Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.",
    "python.testing.unittestArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.testing.unittestEnabled.description": "Enable testing using unittest.",
    "python.venvFolders.description": "Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).",
    "python.venvPath.description": "Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs)."
}
